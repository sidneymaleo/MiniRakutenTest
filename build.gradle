// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    ext {
        compose_version = '1.5.0-beta01'
        navVersion = '2.7.2'
        lifecycle_version = '2.6.0-alpha02'
        coroutines_version = "1.6.4"
        preferences_version = '1.2.1'
        retrofitVersion = '2.4.1'
        converter_gson_version = '2.9.0'
        room_version = '2.5.2'
        dagger_hilt_version = '2.47'
        coil_version = '0.11.1'
        multidex_version = '2.0.1'
        kotlin_version = '1.8.10'
        accompanist_version = '0.30.1'
        j_unit_version = '4.13.2'
        coil_compose = '2.3.0'
        okhttp_version = '4.11.0'
        ext_junit_version = '1.1.3'
        espresso_version = '3.4.0'
        coroutines_test_version = '1.6.1'
        turbine_version = '0.8.0'
        mockito_kotlin_version = '4.0.0'
        mockito_android_version = '4.3.1'
        arch_testing_version = '2.2.0'
        hilt_navigation_compose_version = '1.0.0'
        hilt_version = '2.47'
        junit_version = '4.13.2'
        jacocoVersion = '0.8.4'
    }

    def localProperties = new Properties()
    localProperties.load(project.rootProject.file("local.properties").newDataInputStream())

    subprojects {
        apply plugin: 'jacoco'

        afterEvaluate {
            android {
                testOptions {
                    // It's required for Sonar
                    reportDir "$project.buildDir/reports/coverage/androidTest/debug/connected"

                    buildTypes {
                        // Jacoco config: It configures/enables createDebugCoverageReport task to be used in generateCodeCoverage task below
                        //debug.testCoverageEnabled = true
                    }
                }


                // Jacoco - Generate reports: https://docs.gradle.org/current/userguide/jacoco_plugin.html#default_values_of_the_jacoco_task_extension
                tasks.register('generateCodeCoverage', JacocoReport) {
                    dependsOn 'testDebugUnitTest', 'createDebugCoverageReport'

                    sourceDirectories.from = file("${project.projectDir}/src/main/java") // main source set
                    classDirectories.from = files(JacocoUtil.getKotlinFileTree(project))
                    executionData.from = fileTree(dir: project.buildDir, includes: [
                            '**/*.exec', // unit tests
                            '**/*.ec' // ui tests
                    ])

                    // run unit tests and ui tests to generate code coverage report
                    reports {
                        html.required.set(true)
                        html.outputLocation = layout.buildDirectory.dir('reports/jacoco')
                        xml.required.set(true) // It's required for Sonar
                        xml.outputLocation.set(file("${project.buildDir}/reports/jacoco/jacoco.xml"))
                    }
                }

                // Jacoco - Verify violations: https://docs.gradle.org/current/userguide/jacoco_plugin.html#sec:jacoco_report_violation_rules
                tasks.register('verifyCodeCoverage', JacocoCoverageVerification) {
                    dependsOn 'generateCodeCoverage'

                    sourceDirectories.from = file("${project.projectDir}/src/main/java") // main source set
                    classDirectories.from = files(JacocoUtil.getKotlinFileTree(project))
                    executionData.from = fileTree(dir: project.buildDir, includes: [
                            '**/*.exec', // unit tests
                            '**/*.ec' // ui tests
                    ])

                    violationRules {
                        rule {
                            limit {
                                minimum = 0.3 // 30%
                            }
                        }
                    }
                }
            }
        }

        // Jacoco version: https://docs.gradle.org/current/userguide/jacoco_plugin.html#sec:configuring_the_jacoco_plugin
        jacoco {
            toolVersion = "0.8.10"
        }

        // Jacoco test options: https://docs.gradle.org/current/userguide/jacoco_plugin.html#default_values_of_the_jacoco_task_extension
        tasks.withType(Test).tap {
            configureEach {
                jacoco {
                    includeNoLocationClasses = true // Robolectric support
                    excludes = ['jdk.internal.*'] // Java compatibility
                }
                // Paparazzi screenshots Java compatibility: https://docs.gradle.org/current/userguide/toolchains.html#toolchains_for_tasks
                javaLauncher = javaToolchains.launcherFor {
                    languageVersion = JavaLanguageVersion.of(JavaVersion.VERSION_17.toString())
                }
            }
        }
    }

    // Gradle wrapper: https://docs.gradle.org/current/userguide/gradle_wrapper.html#customizing_wrapper
    tasks.named('wrapper') {
        description = "Gradle wrapper task to update binary"
        gradleVersion = "8.2.1"
        distributionType = Wrapper.DistributionType.BIN
    }

    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:8.0.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.google.dagger:hilt-android-gradle-plugin:2.44.2'
        classpath "org.jacoco:org.jacoco.core:$jacocoVersion"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

tasks.register('clean', Delete) {
    delete rootProject.buildDir
}

class JacocoUtil {
    static ConfigurableFileTree getKotlinFileTree(Project project) {
        return project.fileTree(
                // Where generated Kotlin classes are located
                dir: "$project.buildDir/tmp/kotlin-classes/debug",
                // Exclude everything that is not created by you, e.g. created by HILT
                excludes: [
                        '**/BuildConfig.*',
                        '**/*$*',
                        '**/Hilt_*.class',
                        'hilt_**',
                        'dagger/hilt/**',
                        '**/*JsonAdapter.*'
                ]
        )
    }
}